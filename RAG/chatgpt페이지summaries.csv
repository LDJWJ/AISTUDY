file_name,summary
1_st.write.txt,"The st.write function in the Streamlit library is a versatile command that can be used to display various types of data in a Streamlit app. It accepts multiple arguments and behaves differently depending on the input types. It can be used to display formatted Markdown text, data frames, exceptions, functions, modules, classes, dictionaries, Matplotlib figures, Altair charts, Keras models, Graphviz graphs, Plotly figures, Bokeh figures, SymPy expressions, and HTML objects. By default, HTML tags found in strings are escaped for security reasons, but this behavior can be turned off with the unsafe_allow_html argument. The function returns None and cannot be reused in the app. Examples of using st.write include displaying Markdown-formatted text, numbers, data frames, and charts."
2_magic.txt,"Magic commands in Streamlit allow you to write content such as markdown, data, and charts without using explicit commands. Simply put the content on its own line and it will appear in your app. Magic commands work by automatically using the st.write function to display the content. You can turn off magic commands in your configuration file if you prefer to use explicit commands. Note that magic commands only work in the main Python app file and not in imported files."
3_st.markdown.txt,"The st.markdown function in the Streamlit library is used to display a string formatted as Markdown. It supports various Markdown syntax, including emoji shortcodes, LaTeX expressions, and colored text. By default, HTML tags in the body are escaped for security reasons, but this behavior can be turned off with the unsafe_allow_html parameter. The function also accepts an optional tooltip for additional information. Examples of using st.markdown are provided, including displaying formatted text and accepting user input for Markdown strings."
4_st.title.txt,"The st.title function in the Streamlit library is used to display text in title formatting. It takes three parameters: body (the text to display), anchor (the anchor name of the header), and help (an optional tooltip). The body parameter supports Github-flavored Markdown, emoji shortcodes, LaTeX expressions, and colored text. The anchor parameter is used to generate an anchor for the header, and the help parameter displays a tooltip next to the title."
5_st.header.txt,"The st.header function in the Streamlit library is used to display text in header formatting. It takes the following parameters: body (the text to display), anchor (optional anchor name for the header), help (optional tooltip), and divider (optional colored divider below the header). The body parameter supports Github-flavored Markdown syntax, emoji shortcodes, LaTeX expressions, and colored text. The anchor parameter is used to generate an anchor for the header, and the help parameter displays a tooltip. The divider parameter can be set to a boolean value or a string representing a color to show a colored divider below the header. Examples of using st.header are provided in the documentation."
6_st.subheader.txt,"The st.subheader function in the Streamlit library is used to display text in subheader formatting. It takes the following parameters: body (the text to display), anchor (optional anchor name for the header), help (optional tooltip), and divider (optional colored divider below the header). Examples of using st.subheader include displaying a subheader with a divider and adding emojis or colored text."
7_st.caption.txt,"The st.caption function in the Streamlit library is used to display text in a small font. It is typically used for captions, asides, footnotes, sidenotes, and other explanatory text. The function takes the following parameters: body (the text to display), unsafe_allow_html (a boolean to allow or disallow HTML tags in the text), and help (an optional tooltip). Examples of using st.caption include displaying a string that explains something above and displaying a caption with colored text and emojis. It is important to note that allowing HTML tags in the text can compromise user security."
8_st.code.txt,"The Streamlit documentation provides information on how to use the Streamlit library for building web applications. It covers topics such as installation, fundamentals, tutorials, API reference, and advanced features. The ""st.code"" function is described, which allows displaying a code block with optional syntax highlighting. It takes parameters such as the code body, language, and line numbers. The documentation also includes examples and links to additional resources."
9_st.text.txt,"The Streamlit documentation provides information on various features and functionalities of the Streamlit library. It includes installation instructions, API references, tutorials, and examples. The ""Text elements"" section specifically focuses on the st.text function, which is used to display fixed-width and preformatted text. The function takes a string as input and can also include an optional tooltip. The documentation also provides an example code snippet to demonstrate the usage of the st.text function."
10_st.latex.txt,"The st.latex function in the Streamlit library allows users to display mathematical expressions formatted as LaTeX. It supports various LaTeX functions, and the function signature includes parameters for the body (the expression to display) and an optional help tooltip. An example usage of the function is provided in the documentation. Users can find more information and supported LaTeX functions at the provided link."
11_st.divider.txt,"The st.divider function in the Streamlit library is used to display a horizontal rule. It can be used to visually separate different sections or elements in a web page. The function does not require any parameters and can be called directly. Alternatively, the same effect can be achieved using st.write(""---"") or ""---"" in the script. Multiple dividers can be used to create multiple horizontal rules."
12_st.dataframe.txt,"st.dataframe is a function in the Streamlit library that allows you to display a dataframe as an interactive table. It supports dataframes from various sources such as Pandas, PyArrow, Snowpark, and PySpark. It can also display other types of data that can be converted to dataframes, such as numpy arrays, lists, sets, and dictionaries. The function provides parameters to customize the width, height, visibility of the index column, display order of columns, and configuration of column display. The displayed dataframe is interactive, allowing users to sort, resize, search, and copy data. Additionally, you can configure the display and editing behavior of columns using the Column configuration API."
13_st.data_editor.txt,"st.data_editor is a function in the Streamlit library that allows users to display and edit dataframes and other data structures in a table-like UI. It takes various parameters such as data, width, height, use_container_width, hide_index, column_order, column_config, num_rows, disabled, key, on_change, args, and kwargs. The function returns the edited data in its original data type if it corresponds to any of the supported return types, otherwise it returns the data as a pandas.DataFrame. Users can customize the data editor by configuring columns, adding images, charts, clickable URLs, and more."
14_st.column_config.txt,"The st.column_config class in Streamlit is used for configuring data display and interaction. It provides methods to customize columns for different data types, such as text, numbers, lists, URLs, images, etc. This allows users to view and interact with data in a more enriched and tailored way. The column configuration can be used in conjunction with st.dataframe and st.data_editor functions. It enables tasks like translating temporal data into user-friendly formats and utilizing charts and progress bars for better data visualization. Overall, st.column_config empowers users to present and interact with their data according to their preferences."
15_st.table.txt,"The st.table function in the Streamlit library is used to display static tables. It takes in various types of data, such as pandas DataFrame, numpy ndarray, and pyspark.sql DataFrame, and lays out the entire contents of the table directly on the page. However, for interactive dataframes, it is recommended to use st.dataframe or st.data_editor. The function signature for st.table is st.table(data=None). An example usage of st.table is shown, where a random pandas DataFrame is displayed using st.table."
16_st.metric.txt,"The st.metric function in the Streamlit library allows users to display a metric in a large, bold font with an optional indicator of how the metric has changed. The function takes several parameters including the label (header or title for the metric), value (the actual value of the metric), delta (indicator of how the metric has changed), delta_color (color of the delta indicator), help (optional tooltip), and label_visibility (visibility of the label). The function supports Markdown elements in the label and can be used in combination with st.columns for a visually appealing display. The delta indicator color can be inverted or turned off."
17_st.json.txt,"The `st.json` function in the Streamlit library allows users to display an object or string as a pretty-printed JSON string. The function takes two parameters: `body`, which is the object or string to be printed as JSON, and `expanded`, an optional boolean that determines whether the initial state of the JSON element should be expanded (default is True). Users can use this function to display JSON data in a formatted and readable way."
18_st.area_chart.txt,"st.area_chart is a function in the Streamlit library that is used to display an area chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x parameter specifies the column to use for the x-axis, while the y parameter specifies the column(s) to use for the y-axis. The color parameter can be used to specify the color of the chart. The width and height parameters control the size of the chart, and the use_container_width parameter can be set to True to automatically adjust the width of the chart to fit the container. Examples of how to use st.area_chart are provided in the documentation."
19_st.bar_chart.txt,"st.bar_chart is a function in the Streamlit library that is used to display a bar chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x parameter specifies the column name to use for the x-axis, while the y parameter specifies the column name(s) to use for the y-axis. The color parameter can be used to specify the color of the bars in the chart. The width and height parameters can be used to set the dimensions of the chart, and the use_container_width parameter can be set to True to automatically adjust the chart width to fit the container. Examples of how to use st.bar_chart with different data formats and customization options are provided in the documentation."
20_st.line_chart.txt,"st.line_chart is a function in the Streamlit library that is used to display a line chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x and y parameters specify the column names to use for the x-axis and y-axis, respectively. The color parameter can be used to specify the color of the lines in the chart. The width and height parameters control the size of the chart, and the use_container_width parameter can be set to True to automatically adjust the chart width to fit the container. Examples of how to use st.line_chart are provided in the documentation."
21_st.scatter_chart.txt,"st.scatter_chart is a function in the Streamlit library that allows you to display a scatterplot chart. It is a simplified version of st.altair_chart and is easier to use for basic plotting scenarios. The function takes in data as input, which can be in various formats such as pandas DataFrame, numpy array, or dictionary. You can specify the x-axis and y-axis columns, as well as customize the color and size of the data points. The width and height of the chart can also be adjusted. If the data is in wide format, you can group multiple columns under the y-axis argument to show multiple series with different colors. Overall, st.scatter_chart provides a convenient way to visualize data in a scatterplot format."
22_st.map.txt,"The st.map function in Streamlit allows users to display a map with a scatterplot overlaid onto it. It takes in data as input, which can be a pandas DataFrame, pyarrow Table, pyspark DataFrame, or other iterable data types. Users can specify the latitude and longitude columns in the data, as well as customize the color and size of the datapoints. The function also supports zooming and adjusting the chart width. It is recommended to use a personal Mapbox token for a better user experience. Examples of how to use the st.map function are provided in the documentation."
23_st.pyplot.txt,"The st.pyplot function in the Streamlit library allows you to display a matplotlib.pyplot figure. You can pass a figure object to the function, and it will render the figure in the Streamlit app. The function also provides options to clear the figure after rendering and set the chart width to the column width. It is important to note that starting from December 1st, 2020, the ability to specify no arguments in st.pyplot() will be removed, so it is recommended to always pass a figure object. If you encounter any errors with Matplotlib and Streamlit, you can try setting the backend to ""TkAgg""."
24_st.altair_chart.txt,"The st.altair_chart function in the Streamlit library is used to display a chart using the Altair library. It takes an Altair chart object as input and has optional parameters for setting the chart width and theme. The function allows for easy integration of Altair charts into Streamlit apps. The Streamlit theme is sleek and user-friendly, but it can be disabled to use Altair's native theme. The function also supports annotating charts with text, images, and emojis by creating layered charts. Overall, the st.altair_chart function provides a convenient way to visualize data in Streamlit apps using Altair."
25_st.vega_lite_chart.txt,"The st.vega_lite_chart function in the Streamlit library allows users to display a chart using the Vega-Lite library. Users can pass in data to be plotted or a Vega-Lite spec containing the data. The function also provides options for setting the chart width, choosing a theme (either ""streamlit"" or None), and additional customization using keyword arguments. Examples of usage and links to Vega-Lite examples are provided in the documentation. The Streamlit theme is enabled by default but can be disabled to use Vega-Lite's native theme. Customizations can still be made to the chart configurations."
26_st.plotly_chart.txt,"The st.plotly_chart function in Streamlit allows you to display an interactive Plotly chart in your web application. It closely follows the arguments of Plotly's plot() function. You can use this function to show Plotly charts directly in your Streamlit app. The function takes parameters such as the figure or data to be plotted, the chart width, sharing mode, and theme. You can also customize the theme of the chart using the Streamlit theme or the native Plotly theme. The function supports various kwargs that are accepted by Plotly's plot() function. The documentation provides examples of how to use the st.plotly_chart function to create and display different types of Plotly charts."
27_st.bokeh_chart.txt,"The st.bokeh_chart function in Streamlit allows you to display an interactive Bokeh chart. Bokeh is a charting library for Python. You can pass a Bokeh figure to the st.bokeh_chart function, and it will be displayed in your Streamlit app. You can also set the chart width to the column width by setting the use_container_width parameter to True."
28_st.pydeck_chart.txt,"The st.pydeck_chart function in the Streamlit library allows users to draw a chart using the PyDeck library. This function supports 3D maps, point clouds, and more. It uses Mapbox to provide map tiles for rendering map content. Users are recommended to create and use their own personal Mapbox token to avoid any disruptions. The function takes a PyDeck object as input and has an optional parameter to adjust the width of the chart container. An example code snippet is provided to demonstrate how to use this function to create a chart with a HexagonLayer and ScatterplotLayer. Users can also customize the style of the PyDeck chart to match Streamlit's theme."
29_st.graphviz_chart.txt,The st.graphviz_chart function in the Streamlit library allows users to display a graph using the dagre-d3 library. Users can pass a Graphlib graph object or a dot string to the function to generate the graph. The function also provides an option to set the chart width to the column width. Users can create a graphlib graph object or use GraphViz's Dot language to render the chart. The function is part of the Chart elements in the Streamlit library's API reference.
