file_name,summary
10_st.latex.txt,"The st.latex function in the Streamlit library allows users to display mathematical expressions formatted as LaTeX. It supports various LaTeX functions, and the function signature includes parameters for the body (the string or SymPy expression to display) and an optional help tooltip. An example usage of the st.latex function is provided in the documentation."
11_st.divider.txt,"The st.divider function in the Streamlit library is used to display a horizontal rule. It can be used to visually separate different sections or elements in a Streamlit app. The function does not require any arguments and can be called directly. Alternatively, the same effect can be achieved using st.write(""---"") or simply ""---"" in the script. The function is demonstrated with an example code snippet in the documentation. It is mentioned that multiple horizontal rules can be added to the app to further separate content. The documentation also provides links to other related topics and resources, such as the Streamlit version history, Snowflake integration, and the Streamlit community forums."
12_st.dataframe.txt,"st.dataframe is a function in the Streamlit library that allows you to display a dataframe as an interactive table. It supports dataframes from various sources such as Pandas, PyArrow, Snowpark, and PySpark. It can also display other types of data that can be converted to dataframes, such as numpy arrays, lists, sets, and dictionaries. The function provides parameters to customize the width, height, and visibility of the dataframe, as well as the order and configuration of its columns. The displayed dataframe is interactive, allowing users to sort, resize, search, and copy data. Additionally, you can configure the display and editing behavior of columns using the Column configuration API."
13_st.data_editor.txt,"The st.data_editor function in the Streamlit library allows users to display and edit dataframes and other data structures in a table-like UI. It supports various parameters such as width, height, column order, column configuration, and more to customize the appearance and behavior of the data editor. Users can add and delete rows, and the edited data is returned in its original data type. The function also provides options to disable editing for specific columns or the entire data editor. The edited data can be accessed and used in the application."
14_st.column_config.txt,"The st.column_config class in the Streamlit library is used for configuring data display and interaction. It provides methods to customize columns for different data types, such as text, numbers, lists, URLs, and images. This allows users to view and interact with data in a more enriched and tailored way. The column configuration can be used in conjunction with st.dataframe and st.data_editor functions. It offers various options for configuring columns, including text columns with character limits, number columns with minimum and maximum values, checkbox columns, selectbox columns, datetime columns, date columns, time columns, list columns, link columns, image columns, line chart columns, bar chart columns, and progress columns. Overall, the st.column_config class enhances the data viewing experience and provides flexibility in presenting and interacting with data."
15_st.table.txt,"The st.table function in the Streamlit library is used to display static tables. It takes in various types of data, such as pandas DataFrame, numpy ndarray, and pyspark.sql DataFrame, and lays out the entire contents of the table directly on the page. However, for interactive dataframes, it is recommended to use st.dataframe or st.data_editor. The function signature for st.table is st.table(data=None). An example usage of st.table is shown, where a random pandas DataFrame is displayed using st.table."
16_st.metric.txt,"The st.metric function in the Streamlit library allows you to display a metric in a large, bold font with an optional indicator of how the metric has changed. The function takes several parameters including the label (the header or title for the metric), the value of the metric, the delta (indicator of how the metric has changed), the delta color (color of the delta indicator), help (optional tooltip), and label visibility (visibility of the label). The function supports Markdown elements, emoji shortcodes, LaTeX expressions, and colored text. It can be used in combination with st.columns to create a visually appealing display of multiple metrics. The delta indicator color can be inverted or turned off."
17_st.json.txt,"The st.json function in the Streamlit library allows users to display an object or string as a pretty-printed JSON string. The function takes two parameters: ""body"" which is the object or string to be printed as JSON, and ""expanded"" which is an optional boolean to set the initial state of the JSON element. The default value for ""expanded"" is True. Users can use this function to display JSON data in a formatted and readable way."
18_st.area_chart.txt,"st.area_chart is a function in the Streamlit library that is used to display an area chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x parameter specifies the column to use for the x-axis, while the y parameter specifies the column(s) to use for the y-axis. The color parameter can be used to specify the color of the chart. The width and height parameters control the size of the chart, and the use_container_width parameter can be set to True to automatically adjust the width of the chart to fit the container. Examples of how to use st.area_chart are provided in the documentation."
19_st.bar_chart.txt,"st.bar_chart is a function in the Streamlit library that is used to display a bar chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x parameter specifies the column name to use for the x-axis, while the y parameter specifies the column name(s) to use for the y-axis. The color parameter can be used to specify the color of the bars in the chart. The width and height parameters can be used to set the dimensions of the chart, and the use_container_width parameter can be set to True to automatically adjust the chart width to fit the container. Examples of how to use the st.bar_chart function are provided in the documentation."
1_st.write.txt,"The st.write function in the Streamlit library is a versatile command that can be used to display various types of data in a Streamlit app. It accepts multiple arguments and behaves differently depending on the input types. It can be used to display formatted Markdown text, data frames, exceptions, functions, modules, classes, dictionaries, Matplotlib figures, Altair charts, Keras models, Graphviz graphs, Plotly figures, Bokeh figures, SymPy expressions, and HTML objects. By default, HTML tags found in strings are escaped for security reasons, but this behavior can be turned off with the unsafe_allow_html argument. The function returns None and cannot be reused in the app. Examples of using st.write include displaying Markdown-formatted text, numbers, data frames, and charts."
20_st.line_chart.txt,"st.line_chart is a function in the Streamlit library that is used to display a line chart. It is a simplified version of st.altair_chart and is easier to use for basic plotting scenarios. The function takes in data as input, which can be in various formats such as pandas DataFrame, numpy array, or dictionary. The x parameter specifies the column to use for the x-axis, while the y parameter specifies the column(s) to use for the y-axis. The color parameter can be used to customize the color of the lines in the chart. The width and height parameters control the size of the chart, and the use_container_width parameter can be set to True to automatically adjust the chart width to fit the container. Examples are provided to demonstrate how to use the function with different data formats and customization options."
21_st.scatter_chart.txt,"st.scatter_chart is a function in the Streamlit library that allows you to display a scatterplot chart. It is a simplified version of st.altair_chart and is easier to use for basic plotting scenarios. The function takes in data as input, which can be in various formats such as pandas DataFrame, numpy array, or dictionary. You can specify the x-axis and y-axis columns, as well as customize the color and size of the data points. The width and height of the chart can also be adjusted. If the data is in wide format, you can group multiple columns under the y-axis argument to show multiple series with different colors. Overall, st.scatter_chart provides a convenient way to visualize data in a scatterplot format."
22_st.map.txt,"The st.map function in Streamlit allows users to display a map with a scatterplot overlaid onto it. It takes in data as input, which can be a pandas DataFrame, pyarrow Table, pyspark DataFrame, or other iterable data types. Users can specify the latitude and longitude columns in the data, as well as customize the color and size of the datapoints. The zoom level of the map can also be adjusted. By default, the chart width is set to the column width, but users can override this behavior. The function also provides the option to use a personal Mapbox token for rendering the map tiles. Examples of how to use the st.map function are provided in the documentation."
23_st.pyplot.txt,"The st.pyplot function in the Streamlit library is used to display a matplotlib.pyplot figure. It takes in parameters such as the figure to plot, whether to clear the figure after rendering, and whether to set the chart width to the column width. It is recommended to always pass a figure object as an argument to st.pyplot, as specifying no arguments will be deprecated. If there are any errors using Matplotlib with Streamlit, setting the backend to ""TkAgg"" may help."
24_st.altair_chart.txt,"The st.altair_chart function in the Streamlit library is used to display a chart using the Altair library. It takes in an Altair chart object as input and has optional parameters for setting the chart width and theme. The default theme is the Streamlit theme, but it can be changed to the native Altair theme. The function also provides examples of Altair charts and how to annotate charts with text, images, and emojis."
25_st.vega_lite_chart.txt,"The st.vega_lite_chart function in the Streamlit library allows users to display a chart using the Vega-Lite library. Users can pass in data to be plotted or a Vega-Lite spec containing the data. The function also provides options for setting the chart width, choosing a theme (either ""streamlit"" or None), and additional customization using keyword arguments. Examples of usage and further information can be found in the Streamlit documentation. The default theme for Vega-Lite charts is the Streamlit theme, but users can also use the native Vega-Lite theme by setting theme=None."
26_st.plotly_chart.txt,"The st.plotly_chart function in Streamlit allows you to display an interactive Plotly chart in your web application. It closely follows the arguments of Plotly's plot() function. You can use this function to show Plotly charts directly in Streamlit by calling st.plotly_chart instead of Plotly's py.plot or py.iplot. The function takes parameters such as the figure or data, use_container_width, sharing mode, theme, and additional kwargs. You can customize the theme of the chart using the Streamlit theme or the native Plotly theme. The function also supports customizations such as defining a custom color scale. Overall, st.plotly_chart provides a convenient way to display interactive Plotly charts in your Streamlit app."
27_st.bokeh_chart.txt,"The st.bokeh_chart function in Streamlit allows you to display an interactive Bokeh chart. Bokeh is a charting library for Python. You can pass a Bokeh figure to the st.bokeh_chart function, and it will be displayed in your Streamlit app. You can also set the chart width to the column width by setting the use_container_width parameter to True."
28_st.pydeck_chart.txt,"The st.pydeck_chart function in the Streamlit library allows users to draw a chart using the PyDeck library. This function supports 3D maps, point clouds, and more. It uses Mapbox to provide map tiles for rendering map content. Users are recommended to create and use their own personal Mapbox token to avoid any disruptions to their experience. The function takes two parameters: pydeck_obj, which specifies the PyDeck chart to draw, and use_container_width, which determines whether to use the container width for the chart. An example code snippet is provided to demonstrate how to use the st.pydeck_chart function to create a chart using a HexagonLayer and a ScatterplotLayer. Users can also set the map_style=None in the pydeck.Deck object to make the chart's style consistent with Streamlit's theme."
29_st.graphviz_chart.txt,"The st.graphviz_chart function in the Streamlit library allows users to display a graph using the dagre-d3 library. It takes in a Graphlib graph object or a dot string as input and renders the graph on the web page. The use_container_width parameter can be set to True to adjust the chart width to the column width. An example code snippet is provided to demonstrate how to create a graph object and display it using st.graphviz_chart. Alternatively, the chart can be rendered directly from the graph using GraphViz's Dot language. The page also includes links to other related functions and resources for further learning."
2_magic.txt,"Magic commands in Streamlit allow you to write content such as markdown, data, and charts without using explicit commands. Simply put the content on its own line and it will appear in your app. Magic commands work by automatically writing the content using the st.write function. They also ignore docstrings and can be disabled in the Streamlit configuration file. However, it's important to note that Magic commands currently only work in the main Python app file and not in imported files."
30_st.button.txt,"The st.button function in the Streamlit library is used to display a button widget. It takes several parameters such as label, key, help, on_click, args, kwargs, type, disabled, and use_container_width. The label parameter is a short description of the button that can contain Markdown elements, emojis, LaTeX expressions, and colored text. The key parameter is an optional unique identifier for the widget. The on_click parameter is a callback function that is invoked when the button is clicked. The args and kwargs parameters are optional arguments and keyword arguments to pass to the callback function. The type parameter specifies the button type, either ""primary"" or ""secondary"". The disabled parameter is a boolean that disables the button if set to True. The use_container_width parameter is a boolean that makes the button stretch its width to match the parent container. The function returns True if the button was clicked on the last run of the app, and False otherwise. The st.button function can be used in combination with other input widgets and can be customized using st.session_state."
31_st.download_button.txt,"The `st.download_button` function in the Streamlit library allows users to display a download button widget in their app. This button can be used to provide a way for users to download a file directly from the app. The function takes several parameters including the label (a short description of the button), the data to be downloaded, the file name, the MIME type of the data, and optional parameters for customization. It is important to note that the data to be downloaded is stored in-memory while the user is connected, so it is recommended to keep file sizes small to conserve memory. The function returns a boolean value indicating whether the button was clicked on the last run of the app. Examples are provided for downloading a large DataFrame as a CSV, downloading a string as a file, downloading a binary file, and downloading an image."
32_st.link_button.txt,"The `st.link_button` function in the Streamlit library allows you to display a link button element on a web page. When the button is clicked, a new tab will be opened to the specified URL. The function takes several parameters including the label (a short description of the button), the URL to be opened, an optional tooltip, the button type (primary or secondary), a disabled flag, and a flag to stretch the button width to match the parent container. An example usage of the function is `st.link_button(""Go to gallery"", ""https://streamlit.io/gallery"")`."
33_st.checkbox.txt,"The `st.checkbox` function in the Streamlit library is used to display a checkbox widget. It takes several parameters including `label` (a short label explaining the purpose of the checkbox), `value` (preselects the checkbox when it first renders), `key` (a unique key for the widget), `help` (an optional tooltip), `on_change` (a callback function invoked when the checkbox's value changes), `args` (optional arguments to pass to the callback), `kwargs` (optional keyword arguments to pass to the callback), `disabled` (disables the checkbox if set to True), and `label_visibility` (determines the visibility of the label). The function returns a boolean indicating whether or not the checkbox is checked. An example usage of `st.checkbox` is as follows:

```python
import streamlit as st

agree = st.checkbox('I agree')

if agree:
    st.write('Great!')
```

This code displays a checkbox with the label ""I agree"". If the checkbox is checked, the message ""Great!"" is displayed."
34_st.toggle.txt,"The `st.toggle` function in the Streamlit library is used to display a toggle widget. It takes several parameters including a label, value, key, help, on_change callback, args, kwargs, disabled, and label_visibility. The label parameter is a short description of the toggle, which can include Markdown elements such as bold, italics, and links. The value parameter determines whether the toggle is preselected or not. The key parameter is an optional unique identifier for the widget. The on_change parameter is a callback function that is invoked when the toggle's value changes. The args and kwargs parameters are optional arguments and keyword arguments to pass to the callback function. The disabled parameter can be set to True to disable the toggle. The label_visibility parameter determines the visibility of the label. The function returns a boolean indicating whether the toggle is checked or not. An example usage of the `st.toggle` function is provided in the documentation."
35_st.radio.txt,"st.radio is a function in the Streamlit library that displays a radio button widget. It takes several parameters such as label, options, index, format_func, key, help, on_change, args, kwargs, disabled, horizontal, captions, and label_visibility. The function returns the selected option or None if no option is selected. The radio button widget can be customized by modifying its label, options, format, and visibility. It can also be disabled or oriented horizontally. The function is useful for creating interactive user interfaces in Streamlit applications."
36_st.selectbox.txt,"The st.selectbox function in the Streamlit library is used to display a select widget. It takes several parameters including a label, options, index, format_func, key, help, on_change, args, kwargs, placeholder, disabled, and label_visibility. The label parameter is a short description of the select widget and can contain Markdown elements. The options parameter is an iterable that contains the labels for the select options. The index parameter specifies the preselected option. The format_func parameter is a function that modifies the display of the labels. The key parameter is an optional string or integer used as a unique identifier for the widget. The help parameter is an optional tooltip that is displayed next to the selectbox. The on_change parameter is an optional callback function that is invoked when the value of the selectbox changes. The args and kwargs parameters are optional arguments and keyword arguments to pass to the callback function. The placeholder parameter is a string that is displayed when no options are selected. The disabled parameter is a boolean that disables the selectbox if set to True. The label_visibility parameter controls the visibility of the label. The function returns the selected option or None if no option is selected."
37_st.multiselect.txt,"The `st.multiselect` function in the Streamlit library is used to display a multiselect widget. It takes several parameters including a label, options, default values, format function, key, help text, on_change callback, max selections, placeholder, disabled status, and label visibility. The function returns a list of the selected options. An example usage of `st.multiselect` is shown where the user can select their favorite colors from a list of options."
38_st.slider.txt,"The st.slider function in the Streamlit library allows you to display a slider widget. It supports various data types such as int, float, date, time, and datetime. You can also render a range slider by passing a two-element tuple or list as the value. The difference between st.slider and st.select_slider is that the slider only accepts numerical or date/time data and takes a range as input, while select_slider accepts any datatype and takes an iterable set of options. Note that integer values exceeding a certain limit cannot be accurately stored or returned by the widget. The function signature includes parameters such as label, min_value, max_value, value, step, format, key, help, on_change, args, kwargs, disabled, and label_visibility. The function returns the current value of the slider widget. Examples of using the st.slider function are provided in the documentation."
39_st.select_slider.txt,"st.select_slider is a function in the Streamlit library that allows you to display a slider widget to select items from a list. It accepts any datatype and takes an iterable set of options. You can also render a range slider by passing a two-element tuple or list as the value. The function has parameters such as label, options, value, format_func, key, help, on_change, args, kwargs, disabled, and label_visibility. It returns the current value of the slider widget. Examples of using st.select_slider include selecting a color from a rainbow and selecting a range of color wavelengths."
3_st.markdown.txt,"The st.markdown function in the Streamlit library is used to display a string formatted as Markdown. It supports various Markdown syntax, including emoji shortcodes, LaTeX expressions, and colored text. By default, HTML tags in the body are escaped for security reasons, but this behavior can be turned off with the unsafe_allow_html parameter. The function also accepts an optional tooltip for additional information. Examples of using st.markdown are provided, including displaying formatted text and accepting user input for Markdown strings."
40_st.text_input.txt,"st.text_input is a function in the Streamlit library that displays a single-line text input widget. It takes several parameters such as label, value, max_chars, key, type, help, autocomplete, on_change, args, kwargs, placeholder, disabled, and label_visibility. The function returns the current value of the text input widget or None if no value has been provided by the user. The label_visibility parameter can be used to customize how to hide the label of the text input, and the disabled parameter can be used to disable the text input. Additionally, the placeholder parameter can be used to display an optional placeholder text when the text input is empty."
41_st.number_input.txt,"The st.number_input function in the Streamlit library allows users to input a numeric value. It takes several parameters including a label, minimum and maximum values, default value, step size, format, and more. The function returns the current value of the numeric input widget or None if the widget is empty. Users can also initialize an empty number input by using None as the value parameter."
42_st.text_area.txt,"The st.text_area function in the Streamlit library is used to display a multi-line text input widget. It takes several parameters such as label, value, height, max_chars, key, help, on_change, args, kwargs, placeholder, disabled, and label_visibility. The function returns the current value of the text area widget or None if no value has been provided by the user. An example usage of this function is provided in the documentation."
43_st.date_input.txt,"The st.date_input function in the Streamlit library allows users to display a date input widget. It takes several parameters including a label, value, min_value, max_value, key, help, on_change, args, kwargs, format, disabled, and label_visibility. The function returns the current value of the date input widget or None if no date has been selected. Examples of how to use the function are provided in the documentation."
44_st.time_input.txt,"The st.time_input function in the Streamlit library allows you to display a time input widget. It takes several parameters including a label, value, key, help, on_change, args, kwargs, disabled, label_visibility, and step. The label parameter is used to provide a short description of the time input. The value parameter determines the initial value of the widget, which can be a specific time, the current time, or None. The key parameter is an optional identifier for the widget. The help parameter can be used to display a tooltip next to the input. The on_change parameter allows you to specify a callback function that is invoked when the value of the time input changes. The args and kwargs parameters can be used to pass additional arguments to the callback function. The disabled parameter can be set to True to disable the time input. The label_visibility parameter determines the visibility of the label, with options for ""visible"", ""hidden"", or ""collapsed"". The step parameter specifies the stepping interval in seconds, with a default value of 900 (15 minutes). The function returns the current value of the time input widget or None if no time has been selected."
45_st.file_uploader.txt,"The st.file_uploader function in the Streamlit library allows users to upload files. By default, the maximum file size is 200MB, but this can be configured using the server.maxUploadSize option. The function takes parameters such as label (a short description of the file uploader), type (allowed file extensions), accept_multiple_files (whether multiple files can be uploaded at once), key (a unique identifier for the widget), help (a tooltip for the file uploader), on_change (a callback function when the value of the file uploader changes), disabled (whether the file uploader is disabled), and label_visibility (the visibility of the label). The function returns either None or an UploadedFile object if accept_multiple_files is False, or a list of UploadedFile objects if accept_multiple_files is True. UploadedFile objects can be treated as file-like objects and can be used in various file operations. Examples of using the st.file_uploader function are provided in the documentation."
46_st.camera_input.txt,"The `st.camera_input` function in the Streamlit library is used to display a widget that allows the user to take pictures using their webcam. It takes several parameters including a label to explain the purpose of the widget, a key for uniqueness, a help tooltip, an optional callback function for when the value changes, and options for disabling or hiding the widget. The function returns an object of the `UploadedFile` class, which can be treated as a file-like object. The returned image file buffer can be processed using various image processing libraries such as Pillow, NumPy, OpenCV, TensorFlow, torchvision, and PyTorch. Examples are provided for each library on how to read the image file buffer and perform further processing."
47_st.color_picker.txt,"The st.color_picker function in the Streamlit library allows users to display a color picker widget. It takes several parameters including a label, value, key, help, on_change, args, kwargs, disabled, and label_visibility. The label parameter is a short description of the input, and the value parameter is the initial hex value of the widget. The key parameter is an optional unique identifier for the widget, and the help parameter is an optional tooltip. The on_change parameter is a callback function that is invoked when the value of the color picker changes. The args and kwargs parameters are optional arguments and keyword arguments to pass to the callback function. The disabled parameter is a boolean that disables the color picker if set to True. The label_visibility parameter determines the visibility of the label. The function returns the selected color as a hex string. An example usage of the function is provided in the documentation."
48_st.image.txt,"The st.image function in the Streamlit library allows you to display an image or a list of images. You can pass various types of inputs such as numpy arrays, URLs, local image files, or SVG XML strings. You can also specify the image caption, width, and other parameters like whether to clamp the pixel values or the color format. The function returns the displayed image(s) on the web page."
49_st.audio.txt,"The st.audio function in the Streamlit library allows you to display an audio player. You can pass raw audio data, a filename, or a URL pointing to the audio file to load. The format parameter specifies the mime type for the audio file, and the start_time parameter determines the time from which the audio should start playing. If the data is a numpy array, you can also specify the sample rate of the audio data. The function returns the audio player element."
4_st.title.txt,"The st.title function in the Streamlit library is used to display text in title formatting. It takes three parameters: body (the text to display), anchor (the anchor name of the header), and help (an optional tooltip). The body parameter supports Github-flavored Markdown, emoji shortcodes, LaTeX expressions, and colored text. The anchor parameter is used to generate an anchor for the header, and the help parameter displays a tooltip next to the title."
50_st.video.txt,"The Streamlit documentation provides information on how to use the Streamlit library for building web applications. It covers topics such as installation, fundamentals, tutorials, API reference, and various elements and features available in Streamlit. One of the elements discussed is the st.video function, which allows you to display a video player. The function takes parameters such as the video data, format, and start time. It supports various data types, including URLs and numpy arrays. The documentation also provides an example of how to use the st.video function. Additionally, there is a note about potential issues with displaying videos encoded using the MP4V codec and a suggestion to convert the video to H.264 for better compatibility. The documentation also includes links to the Streamlit community, a changelog, and a cheat sheet."
51_st.sidebar.txt,"The st.sidebar in Streamlit allows you to add widgets to the sidebar of your app. You can use object notation or ""with"" notation to add elements to the sidebar. The sidebar is resizable, and you can add select boxes, radio buttons, and other elements to it. However, st.echo, st.spinner, and st.toast are not supported using object notation and must be used with notation. The sidebar provides a way to organize and add interactivity to your app."
52_st.columns.txt,"The `st.columns` function in the Streamlit library allows you to insert containers laid out as side-by-side columns. You can specify the number and width of columns to insert using the `spec` parameter. The `gap` parameter controls the size of the gap between the columns. The function returns a list of container objects, to which you can add elements using the ""with"" notation or by calling methods directly on the returned object. However, columns cannot be placed inside other columns in the sidebar, only in the main area of the app. Examples are provided to demonstrate how to use the `st.columns` function to insert elements into columns."
53_st.tabs.txt,"The `st.tabs` function in the Streamlit library allows you to insert containers separated into tabs. Each tab represents a group of related content, and users can easily navigate between them. You can add elements to the containers using the ""with"" notation or by calling methods directly on the returned object. However, conditional rendering is not supported. The function takes a list of strings as input, where each string represents the name of a tab. The first tab is selected by default. The strings can also contain Markdown elements such as bold, italics, strikethroughs, inline code, emojis, and links. Additionally, you can use emoji shortcodes, LaTeX expressions, and colored text. The function returns a list of container objects. Examples of how to use the `st.tabs` function are provided in the documentation."
54_st.expander.txt,"The st.expander function in the Streamlit library allows users to insert a container that can be expanded or collapsed. It takes a label parameter as the header for the expander, which can contain Markdown elements such as bold, italics, strikethroughs, inline code, emojis, and links. The expander can be initialized in an expanded or collapsed state using the expanded parameter. Users can add elements to the expander using the ""with"" notation or by calling methods directly on the returned object. However, expanders cannot be nested inside another expander. The function provides examples of how to use the expander with different elements such as bar charts, text, and images."
55_st.container.txt,"st.container is a function in the Streamlit library that allows you to insert an invisible container into your app. This container can hold multiple elements and allows you to insert elements into your app out of order. The function takes two optional parameters: height and border. The height parameter allows you to set the desired height of the container in pixels, and if set to None, the container will grow to fit its content. The border parameter determines whether to show a border around the container. Examples are provided to demonstrate how to use the function, including inserting elements using ""with"" notation, inserting elements out of order, and using height to create a grid or a scrolling container for long content."
56_st.empty.txt,"The `st.empty()` function in the Streamlit library allows you to insert a container in your app that can hold a single element. This container can be used to remove or replace elements at any point. You can use the ""with"" notation or call methods directly on the returned object to insert, replace, or clear elements in the container. There are examples provided on the web page demonstrating how to overwrite elements in-place using ""with"" notation, replace several elements, and clear all elements in the container."
57_st.chat_message.txt,"st.chat_message is a function in the Streamlit library that allows you to insert a chat message container. You can add elements to the container using the with notation or by calling methods directly on the returned object. The function takes two parameters: name (the name of the message author) and avatar (the avatar shown next to the message). The name can be ""user"", ""assistant"", ""ai"", ""human"", or a custom string. The avatar can be an emoji, an image file path or URL, or an image array. The function returns a single container that can hold multiple elements. Examples of how to use st.chat_message are provided in the documentation."
58_st.chat_input.txt,"The st.chat_input function in the Streamlit library allows you to display a chat input widget in your app. It takes several parameters such as placeholder, key, max_chars, disabled, on_submit, args, and kwargs. The function returns the current value of the text input widget. However, it can only be used once per app page and inside the main area of the app, not in the sidebar, columns, expanders, forms, or tabs. The function also provides an optional callback when the chat input's value is submitted. For more details and examples, you can refer to the Streamlit documentation."
59_st.status.txt,"The st.status function in the Streamlit library allows you to insert a container into your app to display the status and details of a process or task. The container can hold multiple elements and can be expanded or collapsed by the user. By default, it initializes in the ""running"" state and can be updated to the ""complete"" or ""error"" state. You can use the ""with"" notation or call methods directly on the returned object to add elements to the container. The label, state, and expanded state can be updated after creation using the .update() method. Examples are provided to demonstrate how to use the st.status function."
5_st.header.txt,"The st.header function in the Streamlit library is used to display text in header formatting. It takes the following parameters: body (the text to display), anchor (optional anchor name for the header), help (optional tooltip), and divider (optional colored divider below the header). The function supports Github-flavored Markdown syntax, emoji shortcodes, LaTeX expressions, and colored text. Examples of using st.header are provided in the documentation."
60_st.rerun.txt,"st.rerun is a function in the Streamlit library that allows you to rerun the script immediately. When st.rerun() is called, the script is halted and queued to re-run from the top. However, there are some caveats to using st.rerun. Additional script runs may be inefficient and slower, excessive reruns may complicate your app's logic, and if misused, infinite looping may crash your app. It is recommended to use callbacks or containers as alternatives to st.rerun. The documentation provides three variations of examples using st.rerun, callbacks, and containers to update an earlier header."
61_st.stop.txt,"The st.stop() function in the Streamlit library stops the execution of the script immediately. No statements after st.stop() will be run. It is recommended to render a message explaining why the script has stopped. An example usage of st.stop() is as follows:

```python
import streamlit as st

name = st.text_input('Name')
if not name:
  st.warning('Please input a name.')
  st.stop()
st.success('Thank you for inputting a name.')
```

This function is useful when you want to stop the execution of the script based on certain conditions."
62_st.switch_page.txt,"The `st.switch_page` function in the Streamlit library allows you to programmatically switch the current page in a multipage app. When called, the current page execution stops and the specified page runs as if the user clicked on it in the sidebar navigation. The specified page must be recognized by Streamlit's multipage architecture, and arbitrary Python scripts cannot be passed to `st.switch_page`. To use this function, you need to provide the file path (relative to the main script) of the page you want to switch to."
63_st.form.txt,"st.form is a feature in the Streamlit library that allows users to create a form with grouped elements and a submit button. When the submit button is pressed, the values of all the widgets inside the form are sent to Streamlit in a batch. The form can be customized with a key, and options such as clearing the form on submit and showing a border can be set. The form can be created using ""with"" notation or by calling methods directly on the form object. However, st.button and st.download_button cannot be added to a form, and forms cannot be embedded inside other forms. The only widget that can have a callback function within a form is st.form_submit_button."
64_st.form_submit_button.txt,"The st.form_submit_button function in Streamlit allows you to display a form submit button. When the button is clicked, all the widget values inside the form are sent to Streamlit in a batch. Every form must have a form_submit_button and it cannot exist outside a form. The function takes several parameters including label (a short label explaining the button's purpose), help (a tooltip displayed when the button is hovered over), on_click (an optional callback function invoked when the button is clicked), args (optional tuple of arguments to pass to the callback), kwargs (optional dictionary of keyword arguments to pass to the callback), type (specifies the button type, either ""primary"" or ""secondary""), disabled (a boolean that disables the button if set to True), and use_container_width (a boolean that makes the button stretch its width to match the parent container). The function returns True if the button was clicked."
65_st.area_chart.txt,"st.area_chart is a function in the Streamlit library that is used to display an area chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x parameter specifies the column to use for the x-axis, while the y parameter specifies the column(s) to use for the y-axis. The color parameter can be used to specify the color of the chart. The width and height parameters control the size of the chart, and the use_container_width parameter can be set to True to automatically adjust the width of the chart to fit the container. Examples of how to use st.area_chart are provided in the documentation."
66_st.bar_chart.txt,"st.bar_chart is a function in the Streamlit library that is used to display a bar chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x parameter specifies the column name to use for the x-axis, while the y parameter specifies the column name(s) to use for the y-axis. The color parameter can be used to specify the color of the bars in the chart. The width and height parameters can be used to set the dimensions of the chart, and the use_container_width parameter can be set to True to automatically adjust the chart width to fit the container. Examples of how to use the st.bar_chart function are provided in the documentation."
67_st.line_chart.txt,"st.line_chart is a function in the Streamlit library that is used to display a line chart. It is a simplified version of st.altair_chart and is easier to use for simple plotting scenarios. The function takes in data as input, which can be a pandas DataFrame, numpy array, or other iterable data types. The x and y parameters specify the column names to use for the x-axis and y-axis, respectively. The color parameter can be used to specify the color of the lines in the chart. The width and height parameters control the size of the chart, and the use_container_width parameter can be set to True to automatically adjust the chart width to fit the container. Examples of how to use st.line_chart are provided in the documentation."
68_st.scatter_chart.txt,"st.scatter_chart is a function in the Streamlit library that allows you to display a scatterplot chart. It is a simplified version of st.altair_chart and is easier to use for basic plotting scenarios. The function takes in data as input, which can be in various formats such as pandas DataFrame, numpy array, or dictionary. You can specify the x-axis and y-axis columns, as well as customize the color and size of the data points. The width and height of the chart can also be adjusted. If the data is in wide format, you can group multiple columns under the y-axis argument to show multiple series with different colors. Overall, st.scatter_chart provides a convenient way to visualize data in a scatterplot format."
69_st.map.txt,"The st.map function in Streamlit allows users to display a map with a scatterplot overlaid onto it. It takes in data as input, which can be a pandas DataFrame, pyarrow Table, pyspark DataFrame, or other iterable data types. Users can specify the latitude and longitude columns in the data, as well as customize the color and size of the datapoints. The function also supports zooming and adjusting the chart width. It is recommended to use a personal Mapbox token for a better user experience. Examples of how to use the st.map function are provided in the documentation."
6_st.subheader.txt,"The st.subheader function in the Streamlit library is used to display text in subheader formatting. It takes the following parameters: body (the text to display), anchor (optional anchor name for the header), help (optional tooltip), and divider (optional colored divider below the header). Examples of usage include displaying colored text, emoji shortcodes, and LaTeX expressions."
70_st.pyplot.txt,"The st.pyplot function in the Streamlit library is used to display a matplotlib.pyplot figure. It takes in parameters such as the figure to plot, whether to clear the figure after rendering, and whether to set the chart width to the column width. It is recommended to always pass a figure object as an argument to st.pyplot, as specifying no arguments will be deprecated. If there are any errors using Matplotlib with Streamlit, setting the backend to ""TkAgg"" may help."
71_st.altair_chart.txt,"The st.altair_chart function in the Streamlit library allows users to display a chart using the Altair library. It takes in an Altair chart object as a parameter and has optional parameters for setting the chart width and theme. The function automatically applies the Streamlit theme to the chart by default, but users can also choose to use Altair's native theme. The function also provides examples of Altair charts and how to annotate charts with text, images, and emojis."
72_st.vega_lite_chart.txt,"The st.vega_lite_chart function in the Streamlit library allows users to display a chart using the Vega-Lite library. Users can pass in data to be plotted or a Vega-Lite spec containing the data. The function also provides options for setting the chart width, choosing a theme (either ""streamlit"" or None), and additional customization using keyword arguments. Examples of usage and further information can be found in the Streamlit documentation. The default theme for Vega-Lite charts is the Streamlit theme, but users can also use the native Vega-Lite theme by setting theme=None."
73_st.plotly_chart.txt,"The st.plotly_chart function in Streamlit allows you to display an interactive Plotly chart in your web application. It closely follows the arguments of Plotly's plot() function. You can use this function to show Plotly charts directly in Streamlit by calling st.plotly_chart instead of Plotly's py.plot or py.iplot. The function takes parameters such as the figure or data, use_container_width, sharing mode, theme, and additional kwargs. You can customize the theme of the chart using the Streamlit theme or the native Plotly theme. The function also supports customizations such as defining a custom color scale. Overall, st.plotly_chart provides a convenient way to display interactive Plotly charts in your Streamlit app."
74_st.bokeh_chart.txt,"The st.bokeh_chart function in Streamlit allows you to display an interactive Bokeh chart. Bokeh is a charting library for Python. You can pass a Bokeh figure to the st.bokeh_chart function, and it will be displayed in your Streamlit app. You can also set the chart width to the column width by setting the use_container_width parameter to True."
75_st.pydeck_chart.txt,"The st.pydeck_chart function in the Streamlit library allows users to draw a chart using the PyDeck library. This function supports 3D maps, point clouds, and more. It uses Mapbox to provide map tiles for rendering map content. Users are recommended to create and use their own personal Mapbox token to avoid any disruptions to their experience. The function takes in a PyDeck object as a parameter, which specifies the chart to draw. Additionally, users can set the use_container_width parameter to True to adjust the chart's width to fit the container. An example code snippet is provided to demonstrate how to use the st.pydeck_chart function to create a chart with a HexagonLayer and a ScatterplotLayer. Users can also set the map_style parameter to None in the PyDeck object to make the chart's style consistent with Streamlit's theme."
76_st.graphviz_chart.txt,The st.graphviz_chart function in the Streamlit library allows users to display a graph using the dagre-d3 library. Users can pass a Graphlib graph object or a dot string to the function to generate the graph. The function also provides an option to set the chart width to the column width. Users can create a graphlib graph object or use GraphViz's Dot language to render the chart. The function is part of the Chart elements in the Streamlit library's API reference.
77_st.set_page_config.txt,"The st.set_page_config function in Streamlit library is used to configure the default settings of the web page. It allows you to set the page title, page icon, layout, initial sidebar state, and menu items. The page title is displayed in the browser tab and defaults to the filename of the script. The page icon can be an image URL, a numpy array, an emoji, or a shortcode. The layout determines how the page content is laid out, with options for ""centered"" or ""wide"". The initial sidebar state determines whether the sidebar is initially expanded, collapsed, or hidden on small devices. The menu items allow you to configure the menu that appears on the top-right side of the app, including options for ""Get help"", ""Report a Bug"", and ""About"". Overall, st.set_page_config is a useful function for customizing the appearance and behavior of your Streamlit app."
78_st.echo.txt,"st.echo is a function in the Streamlit library that allows you to display and execute code in your Streamlit app. You can use it to show the code that generated certain elements in your app, making it more self-explanatory. By using st.echo, you can print and execute code blocks, either above or below the results. It's a simple and useful tool for displaying code and its corresponding output in your Streamlit app."
79_st.help.txt,"st.help is a function in the Streamlit library that allows users to display help and other information for a given object. It can display the object's name, type, value, signature, docstring, member variables, and methods. Users can pass in an object as a parameter to get information about that object. If no object is specified, it will display help for Streamlit itself. This function is useful for quickly checking the documentation of objects, functions, classes, and modules. It can be used with or without the st.magic feature."
7_st.caption.txt,"The st.caption function in the Streamlit library is used to display text in a small font. It is typically used for captions, asides, footnotes, sidenotes, and other explanatory text. The function takes the following parameters: 
- body: The text to display as Github-flavored Markdown. It supports syntax information, emoji shortcodes, LaTeX expressions, and colored text.
- unsafe_allow_html: By default, HTML tags found in strings are escaped and treated as pure text. Setting this argument to True allows HTML tags, but it is not recommended due to security concerns.
- help: An optional tooltip that is displayed next to the caption.

Example usage of st.caption:
```python
import streamlit as st

st.caption('This is a string that explains something above.')
st.caption('A caption with _italics_ :blue[colors] and emojis :sunglasses:')
```

Please note that this is a summary of the content on the web page and may not include all the details."
80_st.query_params.txt,"st.query_params is a utility in the Streamlit library that provides a way to access query parameters in the URL of your app. It allows you to retrieve and set key-value pairs in the URL. When a key is repeated in the URL, st.query_params returns only the last value, but you can use the .get_all() method to get all values associated with a key. The utility also includes methods to clear all query parameters and convert them to a dictionary. However, it cannot get or set embedding settings."
81_st.cache_data.txt,"st.cache_data is a decorator in the Streamlit library that allows you to cache the results of a function that returns data, such as dataframe transforms, database queries, or ML inference. The cached objects are stored in ""pickled"" form and each caller of the cached function gets its own copy of the cached data. You can specify parameters such as the maximum time to keep an entry in the cache, the maximum number of entries to keep, and whether to enable a spinner during cache creation. The cached data can be cleared either for a specific function or for the entire cache. It is important to note that the pickle module used by st.cache_data is known to be insecure, so it is recommended to only load trusted data. Additionally, cached functions can contain Streamlit commands and interactive input widgets, although support for widgets is currently experimental."
82_st.cache_resource.txt,"st.cache_resource is a decorator in the Streamlit library that allows you to cache functions that return global resources, such as database connections or ML models. The cached objects are shared across all users, sessions, and reruns. The decorator ensures thread safety and provides options for setting the maximum time to keep an entry in the cache, the maximum number of entries to keep, and whether to show a spinner during cache creation. You can clear the cache for a specific function or clear the entire cache. The decorator also supports validation functions for cached data and experimental support for using widgets in cached functions."
83_st.cache.txt,"The st.cache function in Streamlit allows you to cache the results of a function based on its name, code, and input parameters. When the function is called, Streamlit checks if it has seen the same combination before. If it has, it retrieves the result from the cache instead of executing the function again. However, the cache feature does not detect changes outside the function. The cache can be configured with parameters such as persisting on disk, allowing output mutation, and setting a maximum number of entries or expiration time. The function decorator @st.cache is used to mark a function for caching. It is important to note that the pickle module used by st.cache can be insecure, so it is recommended to only load trusted data."
84_st.experimental_memo.txt,"st.experimental_memo is an experimental feature in the Streamlit library that allows you to cache the results of functions that return data, such as dataframe transforms, database queries, or ML inference. The cached objects are stored in ""pickled"" form and each caller of the cached function gets its own copy of the cached data. You can set parameters such as the maximum time to keep an entry in the cache, the maximum number of entries to keep, and whether to enable a spinner during cache creation. The cached data can be cleared either for a specific function or for the entire cache. Additionally, you can use st.cache_resource to cache global resources. The experimental_allow_widgets parameter allows you to use widgets in the cached function, but this feature is currently experimental and may lead to excessive memory use."
85_st.experimental_singleton.txt,"st.experimental_singleton is an experimental feature in the Streamlit library that allows you to cache functions that return global resources, such as database connections or ML models. Cached objects are shared across all users, sessions, and reruns. The cached resources must be thread-safe because they can be accessed from multiple threads concurrently. You can set a maximum time to keep an entry in the cache and a maximum number of entries to keep. The decorator also supports validation functions to check the health of the cached data. Additionally, you can enable the use of widgets in the cached function, although this feature is currently experimental. The decorator can be cleared to remove all cached entries. It is recommended to use the validate parameter when the cached output may become invalid over time, and to handle errors and provide fallback mechanisms if the validation fails. The decorator also supports replaying static st elements and input widgets in cache-decorated functions."
86_st.experimental_user.txt,"st.experimental_user is an experimental feature in the Streamlit library that allows developers to personalize their apps for the user viewing the app. It provides access to information about the current user, such as their email address. The user's email can be accessed using either key or attribute notation. This feature can be used to show additional controls for admins, display different content based on the user's email, or greet users with their name stored in a database. The st.experimental_user object also has a to_dict() method that returns a dictionary of the current user's information. However, it is important to note that experimental features and their APIs may change or be removed at any time."
87_st.connection.txt,"The st.connection API in Streamlit allows users to create and manage data connections within their apps. Users can create connections to data stores or APIs, or return existing connections. The API supports various connection types such as SQL, Snowflake, and Snowpark. Users can specify the connection name, type, maximum number of connections to cache, and the expiration time for cached results. Additional connection-specific arguments can also be passed. The API returns an initialized Connection object of the specified type. Users can define connection configurations in secrets.toml files or pass them as kwargs. The API provides examples of how to create connections using default names, custom names, or by specifying the full module path to the connection class. For more details and examples, users can refer to the Streamlit documentation."
88_st.connections.snowflakeconnection.txt,"The SnowflakeConnection class in the Streamlit library allows for connecting to Snowflake using the Snowflake Python Connector. It supports direct SQL querying, accessing the underlying Snowflake Python Connector object, and other convenience functions. The class provides methods such as cursor(), query(), reset(), session(), and write_pandas(). The raw_connection attribute allows access to the underlying Snowflake Python connector object. The connection can be configured using Streamlit secrets or keyword arguments, and it can also use existing Snowflake connection configuration. The class provides functionality for running read-only SQL queries, resetting the connection, creating a new Snowpark Session, and writing pandas DataFrames to Snowflake."
89_st.connections.sqlconnection.txt,"The Streamlit documentation provides information on the st.connections.SQLConnection class, which is used to establish a connection to a SQL database using a SQLAlchemy Engine. The SQLConnection class provides methods such as connect(), query(), and reset() for interacting with the database. It also has attributes like driver, engine, and session. The documentation includes examples of how to use the SQLConnection class to run queries and manage connections."
8_st.code.txt,"The Streamlit documentation provides information on how to use the Streamlit library for building web applications. It covers topics such as installation, fundamentals, tutorials, API reference, and advanced features. The ""st.code"" function is described, which displays a code block with optional syntax highlighting. It takes parameters such as the code body, language, and line numbers. The documentation also includes examples and links to additional resources."
90_st.connections.baseconnection.txt,The BaseConnection class is an abstract base class in the Streamlit library that all Streamlit Connections must inherit from. It provides a standardized way for connection authors to hook into the st.connection() factory function. Connection authors are required to provide an implementation for the _connect method in their subclasses. The BaseConnection class also provides methods and properties to make the implementation of connections more convenient. The reset() method can be used to reset a connection so that it gets reinitialized the next time it's used. This can be useful in scenarios where a connection has become stale or an authentication token has expired.
91_st.experimental_connection.txt,"The st.experimental_connection API in the Streamlit library allows users to create and manage data connections within Streamlit apps. It is an experimental feature that may change or be removed in future versions. Users can create a new connection to a data store or API, or return an existing one by providing a connection name, type, and optional parameters such as maximum cache entries and time-to-live for cached results. The API supports SQL, Snowflake, and Snowpark connections, and allows users to pass additional connection-specific arguments. The API also provides examples of how to use it, including creating connections with default names, custom names, and custom connection classes. Users can refer to the Streamlit documentation for more information and watch a video tutorial for a comprehensive overview of this feature."
92_st.connections.snowparkconnection.txt,"The SnowparkConnection class in the Streamlit library is an experimental feature that allows users to connect to Snowflake using the snowflake.snowpark.session.Session. It provides methods for running read-only SQL queries, resetting the connection, and accessing the underlying Snowpark session. However, it is not recommended for apps with many concurrent users due to potential lock contention. Users should create SnowparkConnections using st.connection() instead of initializing them directly."
93_st.connections.experimentalbaseconnection.txt,"The ExperimentalBaseConnection class is an abstract base class in the Streamlit library that all Streamlit Connections must inherit from. It provides a standardized way for connection authors to hook into the st.connection() factory function. Connection authors are required to provide an implementation for the _connect method in their subclasses. The class also provides methods and properties to make the implementation of connections more convenient. However, it is important to note that the ExperimentalBaseConnection class was deprecated in version 1.28.0 of Streamlit, and it is recommended to use the BaseConnection class instead."
9_st.text.txt,"The Streamlit documentation provides information on various features and functionalities of the Streamlit library. It includes installation instructions, API references, tutorials, and examples. The ""Text elements"" section specifically focuses on the st.text function, which is used to display fixed-width and preformatted text. The function takes a string as input and can also include an optional tooltip. The documentation also provides an example of how to use the st.text function. Users can find more information and ask questions on the Streamlit forums."
